// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: protos/replica.proto

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplicaRPCClient is the client API for ReplicaRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicaRPCClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Leader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error)
	DemoteVoter(ctx context.Context, in *DemoteVoterRequest, opts ...grpc.CallOption) (*DemoteVoterResponse, error)
}

type replicaRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicaRPCClient(cc grpc.ClientConnInterface) ReplicaRPCClient {
	return &replicaRPCClient{cc}
}

func (c *replicaRPCClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/protos.ReplicaRPC/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaRPCClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/protos.ReplicaRPC/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaRPCClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/protos.ReplicaRPC/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaRPCClient) Leader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error) {
	out := new(LeaderResponse)
	err := c.cc.Invoke(ctx, "/protos.ReplicaRPC/Leader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaRPCClient) DemoteVoter(ctx context.Context, in *DemoteVoterRequest, opts ...grpc.CallOption) (*DemoteVoterResponse, error) {
	out := new(DemoteVoterResponse)
	err := c.cc.Invoke(ctx, "/protos.ReplicaRPC/DemoteVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicaRPCServer is the server API for ReplicaRPC service.
// All implementations must embed UnimplementedReplicaRPCServer
// for forward compatibility
type ReplicaRPCServer interface {
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Leader(context.Context, *LeaderRequest) (*LeaderResponse, error)
	DemoteVoter(context.Context, *DemoteVoterRequest) (*DemoteVoterResponse, error)
	mustEmbedUnimplementedReplicaRPCServer()
}

// UnimplementedReplicaRPCServer must be embedded to have forward compatible implementations.
type UnimplementedReplicaRPCServer struct {
}

func (UnimplementedReplicaRPCServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedReplicaRPCServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedReplicaRPCServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedReplicaRPCServer) Leader(context.Context, *LeaderRequest) (*LeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leader not implemented")
}
func (UnimplementedReplicaRPCServer) DemoteVoter(context.Context, *DemoteVoterRequest) (*DemoteVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoteVoter not implemented")
}
func (UnimplementedReplicaRPCServer) mustEmbedUnimplementedReplicaRPCServer() {}

// UnsafeReplicaRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicaRPCServer will
// result in compilation errors.
type UnsafeReplicaRPCServer interface {
	mustEmbedUnimplementedReplicaRPCServer()
}

func RegisterReplicaRPCServer(s grpc.ServiceRegistrar, srv ReplicaRPCServer) {
	s.RegisterService(&ReplicaRPC_ServiceDesc, srv)
}

func _ReplicaRPC_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaRPCServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ReplicaRPC/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaRPCServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaRPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaRPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ReplicaRPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaRPCServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaRPC_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaRPCServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ReplicaRPC/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaRPCServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaRPC_Leader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaRPCServer).Leader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ReplicaRPC/Leader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaRPCServer).Leader(ctx, req.(*LeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaRPC_DemoteVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoteVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaRPCServer).DemoteVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ReplicaRPC/DemoteVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaRPCServer).DemoteVoter(ctx, req.(*DemoteVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplicaRPC_ServiceDesc is the grpc.ServiceDesc for ReplicaRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicaRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ReplicaRPC",
	HandlerType: (*ReplicaRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _ReplicaRPC_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ReplicaRPC_Delete_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _ReplicaRPC_Join_Handler,
		},
		{
			MethodName: "Leader",
			Handler:    _ReplicaRPC_Leader_Handler,
		},
		{
			MethodName: "DemoteVoter",
			Handler:    _ReplicaRPC_DemoteVoter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/replica.proto",
}
