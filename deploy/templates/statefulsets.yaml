{{- range $i, $group := until (int .Values.nodes) }}
apiVersion: v1
kind: Service
metadata:
  name: node-{{ $i }}
  labels:
    app: {{ $.Release.Name }}
    group: node-{{ $i }}
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    app: {{ $.Release.Name }}
    group: node-{{ $i }}
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: kv
    protocol: TCP
    port: 8080
    targetPort: 8080
  - name: noderpc
    protocol: TCP
    port: 8081
    targetPort: 8081
  - name: raft
    protocol: TCP
    port: 8082
    targetPort: 8082
  - name: leader
    protocol: TCP
    port: 8083
    targetPort: 8083
---
{{- end }}
{{- range $i, $group := until (int .Values.nodes) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: node-{{ $i }}-replica
  labels:
    app: {{ $.Release.Name }}
    group: node-{{ $i }}
  namespace: {{ $.Release.Namespace }}
spec:
  serviceName: node-{{ $i }}
  replicas: {{ $.Values.replicas }}
  selector:
    matchLabels:
      app: {{ $.Release.Name }}
      group: node-{{ $i }}
  minReadySeconds: 30
  template:
    metadata:
      labels:
        app: {{ $.Release.Name }}
        group: node-{{ $i }}
      annotations:
        # Trigger rolling update on sync
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      terminationGracePeriodSeconds: 30
      setHostnameAsFQDN: true
      serviceAccountName: {{ $.Values.serviceAccount.name }}
      containers:
      - name: node
        image: {{ $.Values.nodeImage }}
        imagePullPolicy: Never
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_RAW
            - NET_ADMIN
        ports:
        - name: kv
          containerPort: 8080
        - name: noderpc
          containerPort: 8081
        - name: raft
          containerPort: 8082
        env:
        - name: NODE
          value: "{{ $i }}"
        - name: REPLICA
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
        - name: IP_ADDRESS
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        command:
        - bash
        - -c
        - |
          #!/bin/bash
          echo "Starting node-$(NODE)-replica-$(REPLICA) with IP $(IP_ADDRESS)"
          for i in $(seq 1 30); do
            echo "Waiting for DNS. Retries: $i"
            nslookup node-$(NODE)-replica-$(REPLICA).node-$(NODE).{{ $.Release.Namespace }}.svc.{{ $.Values.clusterDomain }} >/dev/null && break
            sleep 2
          done
          setcap cap_net_raw,cap_net_admin+eip /node

          exec /node -node=$(NODE) -replica=$(REPLICA) -nodes={{ $.Values.nodes }} -replicas={{ $.Values.replicas }} -address=$(IP_ADDRESS) &
          pid=$!
          echo $pid > /node.pid
          echo "Node started as pid $pid"
          trap_sigterm() {
            echo "Received SIGTERM, killing node-$(NODE)-replica-$(REPLICA)"
            kill $pid
          }

          trap trap_sigterm SIGTERM

          wait $pid
        lifecycle:
          preStop:
            exec:
              command: ["/bin/bash", "-c", "kill -SIGINT $(cat /node.pid) && sleep 30"]
        volumeMounts:
        - name: data-node
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: data-node
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Mi
---
{{- end }}
