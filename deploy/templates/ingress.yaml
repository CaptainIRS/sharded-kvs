{{- range $i, $group := until (int .Values.nodes) }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: node-{{ $i }}-ingress
  namespace: {{ $.Release.Namespace }}
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/upstream-vhost: "node-{{ $i }}"
spec:
  ingressClassName: nginx
  rules:
  - host: "node-{{ $i }}.{{ $.Release.Namespace }}.svc.{{ $.Values.clusterDomain }}"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: node-{{ $i }}
            port:
              number: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: controller-ingress
  namespace: {{ $.Release.Namespace }}
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/upstream-vhost: "controller"
spec:
  ingressClassName: nginx
  rules:
  - host: "controller.{{ $.Release.Namespace }}.svc.{{ $.Values.clusterDomain }}"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: controller
            port:
              number: 8080
---
{{- end }}
{{ if .Values.chaosMesh.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-chaos-dashboard-under-subpath
  namespace: chaos-mesh
  annotations:
    nginx.ingress.kubernetes.io/use-regex: 'true'
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/configuration-snippet: |
      sub_filter '<head>' '<head> <base href="/chaos-mesh/">';
spec:
  ingressClassName: nginx
  rules:
    - host: chaos-dashboard.svc.{{ $.Values.clusterDomain }}
      http:
        paths:
          - path: /chaos-mesh/?(.*)
            pathType: Prefix
            backend:
              service:
                name: chaos-dashboard
                port:
                  number: 2333
---
{{ end }}
